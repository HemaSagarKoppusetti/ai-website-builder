// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================
// User Management & Authentication
// ================================

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  password      String? // For credential-based auth

  // Profile information
  firstName String?
  lastName  String?
  company   String?
  jobTitle  String?
  bio       String? @db.Text
  avatar    String?
  timezone  String? @default("UTC")

  // Account settings
  isActive         Boolean @default(true)
  isVerified       Boolean @default(false)
  twoFactorEnabled Boolean @default(false)
  twoFactorSecret  String?

  // Subscription & billing
  subscriptionId     String?
  subscriptionTier   SubscriptionTier   @default(FREE)
  subscriptionStatus SubscriptionStatus @default(ACTIVE)
  stripeCustomerId   String?

  // Relationships
  projects              Project[]
  templates             Template[]
  accounts              Account[]
  sessions              Session[]
  deployments           Deployment[]
  collaborations        Collaboration[]
  invitedCollaborations Collaboration[]  @relation("CollaborationInviter")
  components            Component[]
  assets                Asset[]
  versions              Version[]
  generatedCode         GeneratedCode[]
  templateReviews       TemplateReview[]
  analytics             Analytics[]

  // Audit fields
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastLoginAt DateTime?

  @@index([email])
  @@index([subscriptionTier])
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ================================
// Project Management
// ================================

model Project {
  id          String  @id @default(cuid())
  name        String
  description String? @db.Text
  slug        String? @unique

  // Project metadata
  type       ProjectType       @default(WEBSITE)
  status     ProjectStatus     @default(DRAFT)
  visibility ProjectVisibility @default(PRIVATE)

  // Configuration
  settings Json @default("{}")
  metadata Json @default("{}")

  // Theme and styling
  theme     Json    @default("{}")
  customCSS String? @db.Text

  // SEO and meta information
  seoTitle       String?
  seoDescription String? @db.Text
  seoKeywords    String?
  favicon        String?

  // Domain and hosting
  customDomain String?
  subdomain    String?

  // Owner and permissions
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relationships
  pages          Page[]
  components     Component[]
  assets         Asset[]
  deployments    Deployment[]
  versions       Version[]
  collaborations Collaboration[]
  generatedCode  GeneratedCode[]
  analytics      Analytics[]

  // Audit fields
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishedAt DateTime?

  @@index([userId])
  @@index([status])
  @@index([slug])
  @@map("projects")
}

model Page {
  id    String @id @default(cuid())
  title String
  slug  String
  path  String @default("/")

  // Page content and layout
  content  Json @default("[]") // Array of component instances
  layout   Json @default("{}")
  metadata Json @default("{}")

  // SEO specific to page
  seoTitle       String?
  seoDescription String? @db.Text
  seoKeywords    String?

  // Page settings
  isPublished  Boolean @default(false)
  isHomePage   Boolean @default(false)
  requiresAuth Boolean @default(false)

  // Project relationship
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  // Audit fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([projectId, slug])
  @@index([projectId])
  @@map("pages")
}

model Component {
  id       String            @id @default(cuid())
  name     String
  type     ComponentType
  category ComponentCategory

  // Component definition
  props    Json  @default("{}")
  styles   Json  @default("{}")
  children Json? @default("[]")

  // Component metadata
  description String?  @db.Text
  tags        String[] @default([])
  version     String   @default("1.0.0")

  // Generated code
  reactCode String? @db.Text
  htmlCode  String? @db.Text
  cssCode   String? @db.Text

  // Usage and permissions
  isPublic   Boolean @default(false)
  isTemplate Boolean @default(false)
  usageCount Int     @default(0)

  // Project relationship (null if it's a global component)
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  // Creator
  createdById String?
  createdBy   User?   @relation(fields: [createdById], references: [id])

  // Relationships
  assets Asset[]

  // Audit fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([type])
  @@index([category])
  @@index([projectId])
  @@index([isPublic])
  @@map("components")
}

// ================================
// Templates and Marketplace
// ================================

model Template {
  id          String  @id @default(cuid())
  name        String
  description String? @db.Text

  // Template content
  preview    String? // Preview image URL
  content    Json    @default("{}") // Full project structure
  pages      Json    @default("[]") // Page definitions
  components Json    @default("[]") // Component definitions

  // Template metadata
  category TemplateCategory
  tags     String[]         @default([])
  version  String           @default("1.0.0")

  // Pricing and marketplace
  price    Float?  @default(0) // Free if null or 0
  currency String? @default("USD")

  // Usage and popularity
  downloadCount Int    @default(0)
  rating        Float?
  reviewCount   Int    @default(0)

  // Visibility and status
  isPublished Boolean @default(false)
  isApproved  Boolean @default(false)
  isFeatured  Boolean @default(false)

  // Creator
  creatorId String
  creator   User   @relation(fields: [creatorId], references: [id])

  // Relationships
  reviews TemplateReview[]

  // Audit fields
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishedAt DateTime?

  @@index([category])
  @@index([isPublished])
  @@index([creatorId])
  @@index([isFeatured])
  @@map("templates")
}

model TemplateReview {
  id      String  @id @default(cuid())
  rating  Int // 1-5 stars
  comment String? @db.Text

  templateId String
  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([templateId, userId])
  @@index([templateId])
  @@map("template_reviews")
}

// ================================
// Asset Management
// ================================

model Asset {
  id           String @id @default(cuid())
  filename     String
  originalName String
  mimeType     String
  size         Int
  url          String

  // Asset metadata
  alt         String?
  title       String?
  description String?  @db.Text
  tags        String[] @default([])

  // Image specific
  width  Int?
  height Int?
  format String?

  // Storage information
  storageProvider String  @default("cloudinary")
  storageId       String?
  bucket          String?

  // Usage tracking
  usageCount Int @default(0)

  // Relationships
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  componentId String?
  component   Component? @relation(fields: [componentId], references: [id])

  uploadedById String
  uploadedBy   User   @relation(fields: [uploadedById], references: [id])

  // Audit fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId])
  @@index([uploadedById])
  @@index([mimeType])
  @@map("assets")
}

// ================================
// Deployment & Hosting
// ================================

model Deployment {
  id String @id @default(cuid())

  // Deployment configuration
  platform    DeploymentPlatform
  environment DeploymentEnvironment @default(PRODUCTION)
  status      DeploymentStatus      @default(PENDING)

  // Deployment details
  url        String?
  buildId    String?
  commitHash String?
  domain     String?

  // Platform specific data
  platformData Json @default("{}")

  // Build and deployment logs
  buildLogs  String? @db.Text
  deployLogs String? @db.Text

  // Error tracking
  errorMessage String? @db.Text

  // Performance metrics
  buildTime  Int? // Build time in seconds
  deployTime Int? // Deploy time in seconds

  // Project relationship
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  // Creator
  deployedById String
  deployedBy   User   @relation(fields: [deployedById], references: [id])

  // Version tracking
  versionId String?
  version   Version? @relation(fields: [versionId], references: [id])

  // Audit fields
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deployedAt DateTime?

  @@index([projectId])
  @@index([status])
  @@index([platform])
  @@map("deployments")
}

// ================================
// Version Control
// ================================

model Version {
  id          String  @id @default(cuid())
  version     String // Semantic version (1.0.0)
  name        String? // Human readable name
  description String? @db.Text

  // Version content
  snapshot Json // Full project state at this version
  changes  Json @default("[]") // Array of changes made

  // Version metadata
  isStable    Boolean @default(false)
  isPublished Boolean @default(false)

  // Project relationship
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  // Relationships
  deployments Deployment[]

  // Creator
  createdById String
  createdBy   User   @relation(fields: [createdById], references: [id])

  // Audit fields
  createdAt DateTime @default(now())

  @@index([projectId])
  @@index([version])
  @@map("versions")
}

// ================================
// Collaboration
// ================================

model Collaboration {
  id          String            @id @default(cuid())
  role        CollaborationRole @default(VIEWER)
  permissions Json              @default("[]") // Array of specific permissions

  // Collaboration status
  status CollaborationStatus @default(PENDING)

  // Project and user relationship
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Invitation details
  invitedById String?
  invitedBy   User?   @relation("CollaborationInviter", fields: [invitedById], references: [id])

  // Audit fields
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  acceptedAt DateTime?

  @@unique([projectId, userId])
  @@index([projectId])
  @@index([userId])
  @@map("collaborations")
}

// Add the missing relation field to User model
// This should be added to the User model above, but since we can't modify existing content,
// we'll note this for implementation: add this line to User model:
// invitedCollaborations Collaboration[] @relation("CollaborationInviter")

// ================================
// AI and Code Generation
// ================================

model GeneratedCode {
  id String @id @default(cuid())

  // Code content
  prompt    String  @db.Text
  code      String  @db.Text
  language  String // typescript, javascript, html, css, etc.
  framework String? // react, vue, angular, etc.

  // Generation metadata
  model  String? // AI model used (gpt-4, claude-3, etc.)
  tokens Int? // Token count used
  cost   Float? // Generation cost

  // Quality metrics
  isValid   Boolean @default(true)
  hasErrors Boolean @default(false)
  errors    Json? // Array of error messages

  // Usage tracking
  isUsed     Boolean @default(false)
  usageCount Int     @default(0)

  // Project relationship (optional)
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  // Creator
  createdById String
  createdBy   User   @relation(fields: [createdById], references: [id])

  // Audit fields
  createdAt DateTime @default(now())

  @@index([projectId])
  @@index([createdById])
  @@index([language])
  @@map("generated_code")
}

// ================================
// Analytics and Monitoring
// ================================

model Analytics {
  id String @id @default(cuid())

  // Event data
  event      String // Event name
  properties Json   @default("{}")

  // User and session
  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  sessionId String?

  // Project context
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  // Request metadata
  userAgent String?
  ipAddress String?
  country   String?
  city      String?

  // Timestamp
  timestamp DateTime @default(now())

  @@index([event])
  @@index([userId])
  @@index([projectId])
  @@index([timestamp])
  @@map("analytics")
}

// ================================
// Enums
// ================================

enum SubscriptionTier {
  FREE
  PRO
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
}

enum ProjectType {
  WEBSITE
  LANDING_PAGE
  BLOG
  ECOMMERCE
  PORTFOLIO
  DASHBOARD
  DOCUMENTATION
}

enum ProjectStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  DELETED
}

enum ProjectVisibility {
  PRIVATE
  PUBLIC
  UNLISTED
}

enum ComponentType {
  LAYOUT
  UI
  NAVIGATION
  FORM
  DATA_DISPLAY
  MEDIA
  CONTENT
  CUSTOM
}

enum ComponentCategory {
  HERO
  HEADER
  FOOTER
  SIDEBAR
  NAVBAR
  BUTTON
  CARD
  MODAL
  FORM
  TABLE
  CHART
  IMAGE
  VIDEO
  TEXT
  LIST
  GRID
  CONTAINER
}

enum TemplateCategory {
  BUSINESS
  PORTFOLIO
  BLOG
  ECOMMERCE
  LANDING_PAGE
  DASHBOARD
  DOCUMENTATION
  PERSONAL
  CREATIVE
  NONPROFIT
}

enum DeploymentPlatform {
  VERCEL
  NETLIFY
  RENDER
  RAILWAY
  AWS
  AZURE
  GCP
  CUSTOM
}

enum DeploymentEnvironment {
  DEVELOPMENT
  STAGING
  PRODUCTION
}

enum DeploymentStatus {
  PENDING
  BUILDING
  DEPLOYED
  FAILED
  CANCELED
}

enum CollaborationRole {
  OWNER
  ADMIN
  EDITOR
  VIEWER
}

enum CollaborationStatus {
  PENDING
  ACCEPTED
  REJECTED
  REMOVED
}
